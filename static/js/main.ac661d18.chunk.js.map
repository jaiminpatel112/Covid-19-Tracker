{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","latest","setLatest","results","setResults","searchCountries","setSearchCountries","useEffect","axios","all","get","then","responseArr","data","catch","err","console","log","lastUpdated","Date","parseInt","updated","toString","countries","filter","item","country","toLowerCase","includes","map","i","Card","bg","text","className","style","margin","Body","Img","variant","src","countryInfo","flag","Title","Text","cases","todayCases","deaths","todayDeaths","recovered","todayRecovered","active","imgSrc","textAlign","Image","rounded","width","CardDeck","Footer","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","queries","columns","query","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8TA6IeA,MAnIf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGiCJ,mBAAS,IAH1C,mBAGNK,EAHM,KAGWC,EAHX,KAKbC,qBAAU,WACRC,IACGC,IAAI,CACHD,IAAME,IAAI,oCACVF,IAAME,IAAI,4CAEXC,MAAK,SAACC,GACLV,EAAUU,EAAY,GAAGC,MACzBT,EAAWQ,EAAY,GAAGC,SAE3BC,OAAM,SAACC,GACNC,QAAQC,IAAIF,QAEf,IAEH,IACMG,EADO,IAAIC,KAAKC,SAASnB,EAAOoB,UACbC,WAMnBC,EAJkBpB,EAAQqB,QAAO,SAAAC,GACrC,MAA2B,KAApBpB,EAA0BoB,EAAKC,QAAQC,cAAcC,SAASvB,GAAmBoB,KAGxDI,KAAI,SAAChB,EAAMiB,GAC3C,OACE,cAACC,EAAA,EAAD,CAEEC,GAAG,QACHC,KAAK,OACLC,UAAU,cACVC,MAAO,CAAEC,OAAQ,QALnB,SAOE,eAACL,EAAA,EAAKM,KAAN,WACE,cAACN,EAAA,EAAKO,IAAN,CAAUC,QAAQ,MAAMC,IAAK3B,EAAK4B,YAAYC,OAC9C,cAACX,EAAA,EAAKY,MAAN,UAAa9B,EAAKa,UAClB,eAACK,EAAA,EAAKa,KAAN,qBAAmB/B,EAAKgC,SACxB,eAACd,EAAA,EAAKa,KAAN,0BAAwB/B,EAAKiC,cAC7B,eAACf,EAAA,EAAKa,KAAN,sBAAoB/B,EAAKkC,UACzB,eAAChB,EAAA,EAAKa,KAAN,2BAAyB/B,EAAKmC,eAC9B,eAACjB,EAAA,EAAKa,KAAN,yBAAuB/B,EAAKoC,aAC5B,eAAClB,EAAA,EAAKa,KAAN,8BAA4B/B,EAAKqC,kBACjC,eAACnB,EAAA,EAAKa,KAAN,sBAAoB/B,EAAKsC,cAftBrB,MAgCLsB,EAAS,sHAEf,OACE,sBAAKlB,UAAU,MAAf,UACE,uBACA,8BACA,qBAAIA,UAAU,SAASC,MAAO,CAACkB,UAAW,UAA1C,UAAqD,cAACC,EAAA,EAAD,CAAOd,IAAKY,EAAQG,SAAO,EAACpB,MAAO,CAACqB,MAAO,QAAhG,wBAA6H,cAACF,EAAA,EAAD,CAAOd,IAAKY,EAAQG,SAAO,EAACpB,MAAO,CAACqB,MAAO,QAAxK,SAEA,eAACC,EAAA,EAAD,CAAUtB,MAAO,CAACC,OAAQ,QAA1B,UACE,eAACL,EAAA,EAAD,CACEC,GAAG,YACHC,KAAK,QACLC,UAAU,cACVC,MAAO,CAAEC,OAAQ,QAJnB,UAME,eAACL,EAAA,EAAKM,KAAN,WACE,cAACN,EAAA,EAAKY,MAAN,gCACA,cAACZ,EAAA,EAAKa,KAAN,UAAY3C,EAAO4C,WAErB,cAACd,EAAA,EAAK2B,OAAN,UACE,kDAAqBxC,UAGzB,eAACa,EAAA,EAAD,CACEC,GAAG,SACHC,KAAM,QACNC,UAAU,cACVC,MAAO,CAAEC,OAAQ,QAJnB,UAME,eAACL,EAAA,EAAKM,KAAN,WACE,cAACN,EAAA,EAAKY,MAAN,qBACA,cAACZ,EAAA,EAAKa,KAAN,UAAY3C,EAAO8C,YAErB,cAAChB,EAAA,EAAK2B,OAAN,UACE,kDAAqBxC,UAGzB,eAACa,EAAA,EAAD,CACEC,GAAG,UACHC,KAAM,QACNC,UAAU,cACVC,MAAO,CAAEC,OAAQ,QAJnB,UAME,eAACL,EAAA,EAAKM,KAAN,WACE,cAACN,EAAA,EAAKY,MAAN,wBACA,cAACZ,EAAA,EAAKa,KAAN,UAAY3C,EAAOgD,eAErB,cAAClB,EAAA,EAAK2B,OAAN,UACE,kDAAqBxC,aAI3B,uBACA,cAACyC,EAAA,EAAD,UACE,cAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBAAtB,SACE,cAACF,EAAA,EAAKG,QAAN,CACAC,KAAK,OACL7B,UAAU,SACV8B,YAAY,yBACZC,SAAU,SAAAC,GAAC,OAAI5D,EAAmB4D,EAAEC,OAAOC,cAK/C,cAAC,IAAD,CAASC,QA3EG,CACd,CACEC,QAAS,EACTC,MAAO,oBAET,CACED,QAAS,EACTC,MAAO,sBAoEP,SAA4BhD,QC5HnBiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/D,MAAK,YAAkD,IAA/CgE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ac661d18.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\nimport Columns from \"react-columns\";\nimport Form from \"react-bootstrap/Form\";\nimport Image from 'react-bootstrap/Image';\nimport \"./App.css\";\n\nfunction App() {\n  const [latest, setLatest] = useState([]);\n  const [results, setResults] = useState([]);\n  const [searchCountries, setSearchCountries] = useState(\"\");\n\n  useEffect(() => {\n    axios\n      .all([\n        axios.get(\"https://corona.lmao.ninja/v2/all\"),\n        axios.get(\"https://corona.lmao.ninja/v2/countries\"),\n      ])\n      .then((responseArr) => {\n        setLatest(responseArr[0].data);\n        setResults(responseArr[1].data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  const date = new Date(parseInt(latest.updated));\n  const lastUpdated = date.toString();\n\n  const filterCountries = results.filter(item => {\n    return searchCountries !== \"\"  ? item.country.toLowerCase().includes(searchCountries) : item;\n  })\n\n  const countries = filterCountries.map((data, i) => {\n    return (\n      <Card\n        key={i}\n        bg=\"light\"\n        text=\"dark\"\n        className=\"text-center\"\n        style={{ margin: \"10px\" }}\n      >\n        <Card.Body>\n          <Card.Img variant=\"top\" src={data.countryInfo.flag} />\n          <Card.Title>{data.country}</Card.Title>\n          <Card.Text>Cases: {data.cases}</Card.Text>\n          <Card.Text>TodayCases: {data.todayCases}</Card.Text>\n          <Card.Text>Deaths: {data.deaths}</Card.Text>\n          <Card.Text>TodayDeaths: {data.todayDeaths}</Card.Text>\n          <Card.Text>Recovered: {data.recovered}</Card.Text>\n          <Card.Text>TodayRecovered: {data.todayRecovered}</Card.Text>\n          <Card.Text>Active: {data.active}</Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  });\n\n  const queries = [\n    {\n      columns: 2,\n      query: \"min-width: 500px\",\n    },\n    {\n      columns: 4,\n      query: \"min-width: 1000px\",\n    },\n  ];\n\n  const imgSrc = \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/55/Coronavirus_cartoon.svg/987px-Coronavirus_cartoon.svg.png\";\n\n  return (\n    <div className=\"App\">\n      <br />\n      <div>\n      <h1 className=\"header\" style={{textAlign: \"center\"}}><Image src={imgSrc} rounded style={{width: \"5%\"}}/> COVID 19 LIVE STATS <Image src={imgSrc} rounded style={{width: \"5%\"}}/> </h1>\n      </div>\n      <CardDeck style={{margin: \"10px\"}}>\n        <Card\n          bg=\"secondary\"\n          text=\"white\"\n          className=\"text-center\"\n          style={{ margin: \"10px\" }}\n        >\n          <Card.Body>\n            <Card.Title>Coronavirus Cases</Card.Title>\n            <Card.Text>{latest.cases}</Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n        <Card\n          bg=\"danger\"\n          text={\"white\"}\n          className=\"text-center\"\n          style={{ margin: \"10px\" }}\n        >\n          <Card.Body>\n            <Card.Title>Deaths</Card.Title>\n            <Card.Text>{latest.deaths}</Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n        <Card\n          bg=\"success\"\n          text={\"white\"}\n          className=\"text-center\"\n          style={{ margin: \"10px\" }}\n        >\n          <Card.Body>\n            <Card.Title>Recovered</Card.Title>\n            <Card.Text>{latest.recovered}</Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n      </CardDeck>\n      <br />\n      <Form>\n        <Form.Group controlId=\"formGroupSearch\">\n          <Form.Control \n          type=\"text\" \n          className=\"search\"\n          placeholder=\"Search Country Here...\" \n          onChange={e => setSearchCountries(e.target.value)}\n          />\n        </Form.Group>\n      </Form>\n\n      <Columns queries={queries}>{countries}</Columns>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}